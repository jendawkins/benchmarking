# Running "python3 ./process_data.py -c <path/to/your_config_file.cfg>" will result in two .pkl files saved to
# "out_path/tag/": mets.pkl & seqs.pkl.

# Each .pkl file contains:
    # X: a Pandas DataFrame with columns of the metabolite levels or sequence counts for each subject (subjects are rows)
        # If process_before_training is TRUE, X will be filtered and transformed according to the parameters set in
        # [metabolite_preprocessing] or [sequence_preprocessing]
    # y: a Pandas Series with binary class labels for each subject. You can specify which class (or classes)
        # recieves the "1" label by the "outcome_positive_value" setting in [meta_data]
    # taxonomy: a Pandas dataframe with columns corresponding to the columns of "X", and rows corresponding to taxonomy.
        # For taxa, this is the standard "Kingdom, phylum, ..., genus, species".
        # For metabolites, this is created using "Classy-fire" designations, which designate the following:
            # kingdom, superclass, class, subclass, level 5, level 6, level 7, level 8, level 9, level 10
    # tree: the phylogenetic tree for taxa, or a tree based on classy-fire classifications (where branch-length is set to 1)
    # preprocessing: If "process_before_training" is TRUE, this is an empty dictionary. If not, this is a dictionary of
        # the parameters set in the [metabolite_preprocessing] or [sequence_preprocessing] sections so that preprocessing
        # can be done during model training

[description]

# tag creates name for dataset folder
tag:TEST

# (optional) path of input data; defaults to current working directory if not supplied
in_path = ./datasets/FRANZOSA/
out_path = ./datasets/FRANZOSA/processed/

[meta_data]
# ALL FOLLOWING OPTIONS IN THIS SECTION ARE ONLY REQUIRED IF NOT RAW_CDI_DATA
# REQUIRED Path of subject meta data. Data should have samples as the rows and at minimum the outcome as a column.
# Can also provide any other relevant meta-data as the columns such as a coviariate variable that the data should be split on
subject_data:${description:in_path}/metadata_cv.csv

# REQUIRED: Column in subject_data that has subject outcomes
outcome_variable:Study.Group

# (optional) Use to signify the sample IDs column in subject_data IF the sample IDs are not the index of subject_data
sample_id_column:Sample

# (optional) If outcome values are not ints (0s and 1s), specify the outcome varible that should be equal to 1;
outcome_positive_value:UC,CD

# (optional) Can specify instead of outcome_positive_value or can specify both. Specifying both is useful if data has
# some samples with a third outcome; these samples won't be included in processed data
outcome_negative_value:Control

# (optional) If needed, specify covariate variable that data should be split by (i.e. race for vaginal microbiome data)
covariate_variable:

# (optional) If specifying covariate_variable and covariate values are not ints (0s,1s) specify covariate positivd value
covariate_positive_value:

# (optional) Can specify instead of outcome_positive_value or can specify both (i.e. if some samples have third covariate that shouldn't be in processed data)
covariate_negative_value:


[sequence_data]
# REQUIRED: Specify if data is from 16s amplicon sequencing or WGS/metagenomics. options are [16s, WGS]
data_type:WGS

# REQUIRED: input path of data resulting from processing fastq files with programs like Dada2, metaphlan, etc.
# Format expected is rows of samples and columns of sequences in a .csv or .tsv.
# Sequences can be named with identifiers, taxonomy, or with the raw RNA sequence string.
data:${description:in_path}/franzosa_seqs.csv

# (optional) input taxonomy file.
taxonomy:

# (optional) if specified, pplacer will not attempt to run
tree:

# (optional) reference tree containing most/all taxa in data
reference_tree:

# (optional) .tsv or .csv. If node names in "reference tree" do not correspond to column names of data, provide mapper file for tree node name --> data column name
reference_mapper:

# (optional) Must specify if you want a phylogenetic tree in your output dataset AND you have not specified a "tree".
#   *Additionally, if the column names of "data" are the RNA sequences, you do not need to specify this
rna_sequence_strings:


# (Optional) Optional section specifying sequence preprocessing
[sequence_preprocessing]
# (optional) whether to process data during training according to training set (thereby preventing data leakage), or
# beforehand. Note that prediction results may be inflated if set to True. Defaults to False if not specified.
process_before_training:False

# (optional) percent of samples the microbe must be present above "limit_of_detection"; microbes present in less than this are discarded DURING
# MODEL TRAINING (i.e. not in preprocessing)
percent_present_in:10
# defaults to 0 if not provided
limit_of_detection:10

cov_percentile:0

# Transform sequence data to relative abundance. This is done whether or not process_before_training is True
transformations:relative_abundance

[metabolite_data]
# REQUIRED: path to metabolite data
data:${description:in_path}/mtb.tsv

# (Optional) If not specified, cannot calculate classy-fire classifications.
# Meta data needs to have a column with either HMBD ids (labeled 'HMDB'), KEGG ids (labeled 'KEGG') or inchikeys (labeled 'InChIKey')
# (capitalization for labels doesn't matter)
meta_data:${description:in_path}/mtp_map_wInchiKey.csv

# (optional) Path to classy fire classifications for this set of metabolites. If not
# available, data processor will get these from the metabolite meta data
taxonomy:


# (Optional) Optional section specifying metabolite preprocessing
[metabolite_preprocessing]
# (optional) whether to process data during training according to training set (thereby preventing data leakage), or
# beforehand. Note that prediction results may be inflated if set to True. Defaults to False if not specified.
process_before_training:False

# (optional) percent of samples the metabolite must be present above "limit_of_detection";
# metabolites present in less than this are discarded DURING MODEL TRAINING (i.e. not in preprocessing)
percent_present_in:15
# defaults to 0 if not provided
limit_of_detection:0

# (optional)
cov_percentile:0

transformations:log,standardize